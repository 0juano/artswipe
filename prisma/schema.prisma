// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model TestImage {
  id           Int      @id @default(autoincrement())
  imageUrl     String
  style        String?
  subject      String?
  palette      String?
  complexity   String?
  testCategory String
  promptUsed   String?
  createdAt    DateTime @default(now())
  
  choicesLeft  Choice[] @relation("LeftImage")
  choicesRight Choice[] @relation("RightImage")
}

model Session {
  id           String   @id @default(cuid())
  email        String?
  statedOrientation String @default("square")
  statedPalette String
  statedSize   String
  algorithmVersion String @default("basic") // Track which algorithm version
  createdAt    DateTime @default(now())
  completedAt  DateTime? // Track when session completed
  
  choices      Choice[]
  artworks     GeneratedArtwork[]
  profile      UserProfile?
  metrics      AlgorithmMetrics?
}

model Choice {
  id             Int       @id @default(autoincrement())
  sessionId      String
  shownLeftId    Int
  shownRightId   Int
  choice         String
  choiceNumber   Int
  responseTimeMs Int
  createdAt      DateTime  @default(now())
  
  session        Session   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  leftImage      TestImage @relation("LeftImage", fields: [shownLeftId], references: [id])
  rightImage     TestImage @relation("RightImage", fields: [shownRightId], references: [id])
}

model GeneratedArtwork {
  id            String   @id @default(cuid())
  sessionId     String
  imageUrl      String
  cleanImageUrl String?
  prompt        String
  orderIndex    Int
  variationType String?  // Type: primary, secondary, creative, variation
  description   String?  // Description of the artwork variation
  createdAt     DateTime @default(now())
  
  session       Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model UserProfile {
  sessionId           String   @id
  preferredStyle      String
  preferredComplexity Float
  preferredSubjects   String
  preferredPalette    String
  explanationText     String?
  confidenceScore     Float?
  secondaryStyles     String?  // JSON array of secondary style preferences
  styleCorrelations   String?  // JSON array of style-subject correlations
  styleDistribution   String?  // JSON object with style percentages
  subjectScores       String?  // JSON object with subject scores
  createdAt           DateTime @default(now())
  
  session             Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model AlgorithmMetrics {
  id                    Int      @id @default(autoincrement())
  sessionId             String   @unique
  algorithmVersion      String
  totalChoices          Int
  avgResponseTimeMs     Float
  confidenceScore       Float
  consistencyScore      Float?
  completionTimeMs      Int?
  userSatisfaction      Int?     // 1-5 rating if collected
  artworkEngagement     Float?   // Percentage of artworks liked/saved
  uncertainPairs        Int      @default(0)
  quickDecisions        Int      @default(0) // < 2 seconds
  slowDecisions         Int      @default(0) // > 5 seconds
  createdAt             DateTime @default(now())
  
  session               Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}